/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.66
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The ExpiredFutureData model module.
 * @module model/ExpiredFutureData
 * @version v0
 */
export class ExpiredFutureData {
  /**
   * Constructs a new <code>ExpiredFutureData</code>.
   * @alias module:model/ExpiredFutureData
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ExpiredFutureData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ExpiredFutureData} obj Optional instance to populate.
   * @return {module:model/ExpiredFutureData} The populated <code>ExpiredFutureData</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ExpiredFutureData();
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('segment'))
        obj.segment = ApiClient.convertToType(data['segment'], 'String');
      if (data.hasOwnProperty('exchange'))
        obj.exchange = ApiClient.convertToType(data['exchange'], 'String');
      if (data.hasOwnProperty('expiry'))
        obj.expiry = ApiClient.convertToType(data['expiry'], 'String');
      if (data.hasOwnProperty('instrument_key'))
        obj.instrumentKey = ApiClient.convertToType(data['instrument_key'], 'String');
      if (data.hasOwnProperty('exchange_token'))
        obj.exchangeToken = ApiClient.convertToType(data['exchange_token'], 'String');
      if (data.hasOwnProperty('trading_symbol'))
        obj.tradingSymbol = ApiClient.convertToType(data['trading_symbol'], 'String');
      if (data.hasOwnProperty('tick_size'))
        obj.tickSize = ApiClient.convertToType(data['tick_size'], 'Number');
      if (data.hasOwnProperty('lot_size'))
        obj.lotSize = ApiClient.convertToType(data['lot_size'], 'Number');
      if (data.hasOwnProperty('instrument_type'))
        obj.instrumentType = ApiClient.convertToType(data['instrument_type'], 'String');
      if (data.hasOwnProperty('freeze_quantity'))
        obj.freezeQuantity = ApiClient.convertToType(data['freeze_quantity'], 'Number');
      if (data.hasOwnProperty('underlying_key'))
        obj.underlyingKey = ApiClient.convertToType(data['underlying_key'], 'String');
      if (data.hasOwnProperty('underlying_type'))
        obj.underlyingType = ApiClient.convertToType(data['underlying_type'], 'String');
      if (data.hasOwnProperty('underlying_symbol'))
        obj.underlyingSymbol = ApiClient.convertToType(data['underlying_symbol'], 'String');
      if (data.hasOwnProperty('minimum_lot'))
        obj.minimumLot = ApiClient.convertToType(data['minimum_lot'], 'Number');
    }
    return obj;
  }
}

/**
 * Name of the instrument
 * @member {String} name
 */
ExpiredFutureData.prototype.name = undefined;

/**
 * Segment of the instrument
 * @member {String} segment
 */
ExpiredFutureData.prototype.segment = undefined;

/**
 * Exchange of the instrument
 * @member {String} exchange
 */
ExpiredFutureData.prototype.exchange = undefined;

/**
 * Expiry date of the instrument
 * @member {String} expiry
 */
ExpiredFutureData.prototype.expiry = undefined;

/**
 * Unique key identifying the instrument
 * @member {String} instrumentKey
 */
ExpiredFutureData.prototype.instrumentKey = undefined;

/**
 * Token assigned by the exchange
 * @member {String} exchangeToken
 */
ExpiredFutureData.prototype.exchangeToken = undefined;

/**
 * Symbol used for trading
 * @member {String} tradingSymbol
 */
ExpiredFutureData.prototype.tradingSymbol = undefined;

/**
 * Minimum price movement
 * @member {Number} tickSize
 */
ExpiredFutureData.prototype.tickSize = undefined;

/**
 * Number of units per lot
 * @member {Number} lotSize
 */
ExpiredFutureData.prototype.lotSize = undefined;

/**
 * Type of the instrument
 * @member {String} instrumentType
 */
ExpiredFutureData.prototype.instrumentType = undefined;

/**
 * Maximum allowed quantity
 * @member {Number} freezeQuantity
 */
ExpiredFutureData.prototype.freezeQuantity = undefined;

/**
 * Key of the underlying asset
 * @member {String} underlyingKey
 */
ExpiredFutureData.prototype.underlyingKey = undefined;

/**
 * Type of the underlying asset
 * @member {String} underlyingType
 */
ExpiredFutureData.prototype.underlyingType = undefined;

/**
 * Symbol of the underlying asset
 * @member {String} underlyingSymbol
 */
ExpiredFutureData.prototype.underlyingSymbol = undefined;

/**
 * Minimum lot size
 * @member {Number} minimumLot
 */
ExpiredFutureData.prototype.minimumLot = undefined;

