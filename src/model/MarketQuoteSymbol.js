/*
 * Upstox Developer API
 * Build your App on the Upstox platform  ![Banner](https://api.upstox.com/api-docs/images/banner.jpg \"banner\")  # Introduction  Upstox API is a set of rest APIs that provide data required to build a complete investment and trading platform. Execute orders in real time, manage user portfolio, stream live market data (using Websocket), and more, with the easy to understand API collection.  All requests are over HTTPS and the requests are sent with the content-type ‘application/json’. Developers have the option of choosing the response type as JSON or CSV for a few API calls.  To be able to use these APIs you need to create an App in the Developer Console and generate your **apiKey** and **apiSecret**. You can use a redirect URL which will be called after the login flow.  If you are a **trader**, you can directly create apps from Upstox mobile app or the desktop platform itself from **Apps** sections inside the **Account** Tab. Head over to <a href=\"http://account.upstox.com/developer/apps\" target=\"_blank\">account.upstox.com/developer/apps</a>.</br> If you are a **business** looking to integrate Upstox APIs, reach out to us and we will get a custom app created for you in no time.  It is highly recommended that you do not embed the **apiSecret** in your frontend app. Create a remote backend which does the handshake on behalf of the frontend app. Marking the apiSecret in the frontend app will make your app vulnerable to threats and potential issues. 
 *
 * OpenAPI spec version: v2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {DepthMap} from './DepthMap';
import {Ohlc} from './Ohlc';

/**
 * The MarketQuoteSymbol model module.
 * @module model/MarketQuoteSymbol
 * @version v2
 */
export class MarketQuoteSymbol {
  /**
   * Constructs a new <code>MarketQuoteSymbol</code>.
   * @alias module:model/MarketQuoteSymbol
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>MarketQuoteSymbol</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MarketQuoteSymbol} obj Optional instance to populate.
   * @return {module:model/MarketQuoteSymbol} The populated <code>MarketQuoteSymbol</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MarketQuoteSymbol();
      if (data.hasOwnProperty('ohlc'))
        obj.ohlc = Ohlc.constructFromObject(data['ohlc']);
      if (data.hasOwnProperty('depth'))
        obj.depth = DepthMap.constructFromObject(data['depth']);
      if (data.hasOwnProperty('timestamp'))
        obj.timestamp = ApiClient.convertToType(data['timestamp'], 'String');
      if (data.hasOwnProperty('instrument_token'))
        obj.instrumentToken = ApiClient.convertToType(data['instrument_token'], 'String');
      if (data.hasOwnProperty('symbol'))
        obj.symbol = ApiClient.convertToType(data['symbol'], 'String');
      if (data.hasOwnProperty('last_price'))
        obj.lastPrice = ApiClient.convertToType(data['last_price'], 'Number');
      if (data.hasOwnProperty('volume'))
        obj.volume = ApiClient.convertToType(data['volume'], 'Number');
      if (data.hasOwnProperty('average_price'))
        obj.averagePrice = ApiClient.convertToType(data['average_price'], 'Number');
      if (data.hasOwnProperty('oi'))
        obj.oi = ApiClient.convertToType(data['oi'], 'Number');
      if (data.hasOwnProperty('net_change'))
        obj.netChange = ApiClient.convertToType(data['net_change'], 'Number');
      if (data.hasOwnProperty('total_buy_quantity'))
        obj.totalBuyQuantity = ApiClient.convertToType(data['total_buy_quantity'], 'Number');
      if (data.hasOwnProperty('total_sell_quantity'))
        obj.totalSellQuantity = ApiClient.convertToType(data['total_sell_quantity'], 'Number');
      if (data.hasOwnProperty('lower_circuit_limit'))
        obj.lowerCircuitLimit = ApiClient.convertToType(data['lower_circuit_limit'], 'Number');
      if (data.hasOwnProperty('upper_circuit_limit'))
        obj.upperCircuitLimit = ApiClient.convertToType(data['upper_circuit_limit'], 'Number');
      if (data.hasOwnProperty('last_trade_time'))
        obj.lastTradeTime = ApiClient.convertToType(data['last_trade_time'], 'String');
      if (data.hasOwnProperty('oi_day_high'))
        obj.oiDayHigh = ApiClient.convertToType(data['oi_day_high'], 'Number');
      if (data.hasOwnProperty('oi_day_low'))
        obj.oiDayLow = ApiClient.convertToType(data['oi_day_low'], 'Number');
    }
    return obj;
  }
}

/**
 * @member {module:model/Ohlc} ohlc
 */
MarketQuoteSymbol.prototype.ohlc = undefined;

/**
 * @member {module:model/DepthMap} depth
 */
MarketQuoteSymbol.prototype.depth = undefined;

/**
 * Time in milliseconds at which the feeds was updated
 * @member {String} timestamp
 */
MarketQuoteSymbol.prototype.timestamp = undefined;

/**
 * Key issued by Upstox for the instrument
 * @member {String} instrumentToken
 */
MarketQuoteSymbol.prototype.instrumentToken = undefined;

/**
 * Shows the trading symbol of the instrument
 * @member {String} symbol
 */
MarketQuoteSymbol.prototype.symbol = undefined;

/**
 * The last traded price of symbol
 * @member {Number} lastPrice
 */
MarketQuoteSymbol.prototype.lastPrice = undefined;

/**
 * The volume traded today on symbol
 * @member {Number} volume
 */
MarketQuoteSymbol.prototype.volume = undefined;

/**
 * Average price
 * @member {Number} averagePrice
 */
MarketQuoteSymbol.prototype.averagePrice = undefined;

/**
 * Total number of outstanding contracts held by market participants exchange-wide (only F&O)
 * @member {Number} oi
 */
MarketQuoteSymbol.prototype.oi = undefined;

/**
 * The absolute change from yesterday's close to last traded price
 * @member {Number} netChange
 */
MarketQuoteSymbol.prototype.netChange = undefined;

/**
 * The total number of bid quantity available for trading
 * @member {Number} totalBuyQuantity
 */
MarketQuoteSymbol.prototype.totalBuyQuantity = undefined;

/**
 * The total number of ask quantity available for trading
 * @member {Number} totalSellQuantity
 */
MarketQuoteSymbol.prototype.totalSellQuantity = undefined;

/**
 * The lower circuit of symbol
 * @member {Number} lowerCircuitLimit
 */
MarketQuoteSymbol.prototype.lowerCircuitLimit = undefined;

/**
 * The upper circuit of symbol
 * @member {Number} upperCircuitLimit
 */
MarketQuoteSymbol.prototype.upperCircuitLimit = undefined;

/**
 * Time in milliseconds at which last trade happened
 * @member {String} lastTradeTime
 */
MarketQuoteSymbol.prototype.lastTradeTime = undefined;

/**
 * @member {Number} oiDayHigh
 */
MarketQuoteSymbol.prototype.oiDayHigh = undefined;

/**
 * @member {Number} oiDayLow
 */
MarketQuoteSymbol.prototype.oiDayLow = undefined;

